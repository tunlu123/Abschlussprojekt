stages {
  stage('Build Backend') {
    steps {
      dir('backend') {
        sh "mvn clean package -P${params.BUILD_ENV}"
      }
    }
  }

  stage('Test Backend') {
    steps {
      dir('backend') {
        sh "mvn test"
      }
    }
  }

  stage('Build Frontend') {
    steps {
      dir('frontend') {
        sh "npm ci && npm run build"
      }
    }
  }

  stage('Test Frontend') {
    steps {
      dir('frontend') {
        sh "npm test || true"
      }
    }
  }

  stage('Docker Build') {
    steps {
      sh """
        docker build -t ${REGISTRY_URL}/${IMAGE_BACKEND}:${params.BUILD_ENV} ./backend
        docker build -t ${REGISTRY_URL}/${IMAGE_FRONTEND}:${params.BUILD_ENV} ./frontend
      """
    }
  }

  stage('Docker Push') {
    steps {
      script {
        withCredentials([usernamePassword(
          credentialsId: 'azure-credentials',
          usernameVariable: 'DOCKER_USER',
          passwordVariable: 'DOCKER_PASS'
        )]) {
          sh """
            echo $DOCKER_PASS | docker login $REGISTRY_URL -u $DOCKER_USER --password-stdin
            docker push ${REGISTRY_URL}/${IMAGE_BACKEND}:${params.BUILD_ENV}
            docker push ${REGISTRY_URL}/${IMAGE_FRONTEND}:${params.BUILD_ENV}
          """
        }
      }
    }
  }

  // ðŸš€ Deploy fÃ¼r DEV
  stage('Deploy Dev') {
    when {
      expression { params.BUILD_ENV == 'dev' }
    }
    steps {
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          def namespace = 'talha-dev'
          def manifest = "k8s/dev"

          withCredentials([file(credentialsId: 'kubeconfig-talha-dev', variable: 'KUBECONFIG')]) {
            withEnv(["KUBECONFIG=${KUBECONFIG}"]) {
              sh """
                kubectl apply -f ${manifest}
                kubectl rollout status deployment/backend -n ${namespace} --timeout=300s
                kubectl rollout status deployment/frontend -n ${namespace} --timeout=300s
              """
            }
          }
        }
      }
    }
  }

  // ðŸš€ Deploy fÃ¼r PROD
  stage('Deploy Prod') {
    when {
      expression { params.BUILD_ENV == 'prod' }
    }
    steps {
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        withCredentials([file(credentialsId: 'kubeconfig-prod', variable: 'KUBECONFIG')]) {
          withEnv(["KUBECONFIG=${KUBECONFIG}"]) {
            sh "kubectl apply -f kubernetes/k8s_prod.yaml"
          }
        }
      }
    }
  }
}
