pipeline {
    agent any

    environment {
        REGISTRY = "registrykurs1.azurecr.io"
        BACKEND_IMAGE = "${REGISTRY}/backend-app"
        FRONTEND_IMAGE = "${REGISTRY}/frontend-app"
        KUBECONFIG_DEV = credentials('kubeconfig-talha-dev')
        KUBECONFIG_PROD = credentials('kubeconfig-talha-prod')
    }

    stages {
        stage('Build & Test') {
            steps {
                dir('backend') {
                    sh "mvn clean package"
                    sh "mvn test"
                }
                dir('frontend') {
                    sh "npm install && npm run build"
                    sh "npm test || true"
                }
            }
        }

        stage('Docker Build & Push') {
            steps {
                script {
                    docker.withRegistry("https://${REGISTRY}", 'azure-credentials') {
                        docker.build("${BACKEND_IMAGE}:${env.BUILD_NUMBER}", "./backend").push()
                        docker.build("${FRONTEND_IMAGE}:${env.BUILD_NUMBER}", "./frontend").push()
                    }
                }
            }
        }

        stage('Deploy to Dev') {
            steps {
                script {
                    withEnv(["KUBECONFIG=${env.KUBECONFIG_DEV}"]) {
                        sh """
                            kubectl apply -f k8s/dev --namespace=dev
                            kubectl rollout status deployment/backend -n dev --timeout=300s
                            kubectl rollout status deployment/frontend -n dev --timeout=300s
                        """
                    }
                }
            }
        }

        stage('Manual Approval') {
            steps {
                timeout(time: 1, unit: 'HOURS') {
                    input message: 'Production deployment freigeben?'
                }
            }
        }

        stage('Deploy to Prod') {
            steps {
                script {
                    withEnv(["KUBECONFIG=${env.KUBECONFIG_PROD}"]) {
                        sh """
                            kubectl apply -f k8s/prod --namespace=prod
                            kubectl rollout status deployment/backend -n prod --timeout=300s
                            kubectl rollout status deployment/frontend -n prod --timeout=300s
                        """
                    }
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
        success {
            echo "✅ Pipeline erfolgreich abgeschlossen"
        }
        failure {
            echo "❌ Pipeline fehlgeschlagen"
        }
    }
}