pipeline {
  agent any
 
  parameters {
    choice(
      name: 'BUILD_ENV',
      choices: ['dev', 'prod'],
      description: 'Wählen Sie die Zielumgebung'
    )
  }
 
  environment {
    IMAGE_BACKEND = "backend-app"
    IMAGE_FRONTEND = "frontend-app"
    REGISTRY_URL = "registrykurs1.azurecr.io"
  }
 
  stages {
    stage('Build Backend') {
      steps {
        dir('backend') {
          sh "mvn clean package -P${params.BUILD_ENV}"
        }
      }
    }

    stage('Test Backend') {
      steps {
        dir('backend') {
          sh "mvn test"
        }
      }
    }

    stage('Build Frontend') {
      steps {
        dir('frontend') {
          sh "npm install && npm run build"
        }
      }
    }

    stage('Test Frontend') {
      steps {
        dir('frontend') {
          sh "npm test || true"
        }
      }
    }

    stage('Docker Build') {
      steps {
        sh "docker build -t ${REGISTRY_URL}/${IMAGE_BACKEND}:${params.BUILD_ENV} ./backend"
        sh "docker build -t ${REGISTRY_URL}/${IMAGE_FRONTEND}:${params.BUILD_ENV} ./frontend"
      }
    }

stage('Docker Push') {
    steps {
        script {
            withCredentials([usernamePassword(credentialsId: 'your-acr-credentials-id', passwordVariable: 'ACR_PASSWORD', usernameVariable: 'ACR_USERNAME')]) {
                sh "docker login registrykurs1.azurecr.io -u ${env.ACR_USERNAME} --password-stdin <<< ${env.ACR_PASSWORD}"
          
                sh 'docker push registrykurs1.azurecr.io/frontend-app:dev'
               
            }
        }
    }
}

    stage('Deploy') {
      steps {
        script {
          def kubeconfig = params.BUILD_ENV == 'dev' ? 'kubeconfig-talha-dev' : 'kubeconfig-talha-prod'
          def namespace = params.BUILD_ENV
          def manifest = "k8s/${params.BUILD_ENV}"
          
          withCredentials([file(credentialsId: kubeconfig, variable: 'KUBECONFIG')]) {
            sh """
              kubectl apply -f ${manifest} --namespace=${namespace}
              kubectl rollout status deployment/backend -n ${namespace} --timeout=300s
              kubectl rollout status deployment/frontend -n ${namespace} --timeout=300s
            """
          }
        }
      }
    }
  } 
  
  post {
    always {
      cleanWs()
      echo "Pipeline abgeschlossen für ${params.BUILD_ENV}"
    }
    success {
      slackSend(
        color: 'good',
        message: "Erfolgreich deployed: Build #${env.BUILD_NUMBER} -> ${params.BUILD_ENV}"
      )
    }
    failure {
      slackSend(
        color: 'danger',
        message: "Fehler beim Deployment: Build #${env.BUILD_NUMBER} -> ${params.BUILD_ENV}"
      )
    }
  }
}